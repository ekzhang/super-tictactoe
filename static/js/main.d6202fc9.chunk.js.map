{"version":3,"sources":["Cell.js","utils.js","SubBoard.js","Board.js","ai.js","App.js","serviceWorker.js","index.js"],"names":["Cell","_ref","value","onClick","color","text","react_default","a","createElement","className","style","copyArray","board","ret","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","sub","push","slice","err","return","findWinner","lines","_i","length","_ref3","_ref2","Object","slicedToArray","b","c","val","findGlobalWinner","map","SubBoard","winner","src_Cell","Board","background","borderRadius","src_SubBoard","j","hash","state","mod","h","ar","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","turn","current","moveList","winners","moves","i","succ","move","succImmutable","objectSpread","rollout","Math","floor","random","nextMove","N","n","w","uctPolicy","node","best","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","ch","score","sqrt","log","pickUnvisited","unvis","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","it","history","leaf","nxt","result","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","m","num","startState","Array","fill","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","restart","bind","assertThisInitialized","handleClick","aiMove","undo","setState","gameState","local","localWinner","freeSquares","indexOf","board2","setTimeout","alert","concat","apply","toConsumableArray","src_Board","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d6202fc9.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Cell({ value, onClick }) {\n  const color = (value ? 'red' : 'blue');\n  const text = (value === -1 ? '' : value ? 'O' : 'X');\n  return (\n    <div className=\"cell\" onClick={onClick} style={{ color }}>{text}</div>\n  );\n}\n\nexport default Cell;\n","export function copyArray(board) {\n  const ret = [];\n  for (const sub of board)\n    ret.push(sub.slice());\n  return ret;\n}\n\nexport function findWinner(board) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (const [a, b, c] of lines) {\n    const val = board[a];\n    if (val !== -1 && val === board[b] && val === board[c])\n      return board[a];\n  }\n  return -1;\n}\n\nexport function findGlobalWinner(board) {\n  return findWinner(board.map(findWinner));\n}\n","import React from 'react';\nimport Cell from './Cell';\nimport { findWinner } from './utils';\n\nfunction SubBoard({ value, onClick }) {\n  const winner = findWinner(value);\n  return (\n    <table className={winner === -1 ? '' : 'win-' + winner}>\n      <tbody>\n        <tr>\n          <td><Cell value={value[0]} onClick={() => onClick(0)} /></td>\n          <td><Cell value={value[1]} onClick={() => onClick(1)} /></td>\n          <td><Cell value={value[2]} onClick={() => onClick(2)} /></td>\n        </tr>\n        <tr>\n          <td><Cell value={value[3]} onClick={() => onClick(3)} /></td>\n          <td><Cell value={value[4]} onClick={() => onClick(4)} /></td>\n          <td><Cell value={value[5]} onClick={() => onClick(5)} /></td>\n        </tr>\n        <tr>\n          <td><Cell value={value[6]} onClick={() => onClick(6)} /></td>\n          <td><Cell value={value[7]} onClick={() => onClick(7)} /></td>\n          <td><Cell value={value[8]} onClick={() => onClick(8)} /></td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nexport default SubBoard;\n","import React from 'react';\nimport SubBoard from './SubBoard';\n\nfunction Board({ board, onClick }) {\n  return (\n    <table style={{ background: 'black', borderRadius: 6 }}>\n      <tbody>\n        <tr>\n          <td><SubBoard value={board[0]} onClick={j => onClick(0, j)} /></td>\n          <td><SubBoard value={board[1]} onClick={j => onClick(1, j)} /></td>\n          <td><SubBoard value={board[2]} onClick={j => onClick(2, j)} /></td>\n        </tr>\n        <tr>\n          <td><SubBoard value={board[3]} onClick={j => onClick(3, j)} /></td>\n          <td><SubBoard value={board[4]} onClick={j => onClick(4, j)} /></td>\n          <td><SubBoard value={board[5]} onClick={j => onClick(5, j)} /></td>\n        </tr>\n        <tr>\n          <td><SubBoard value={board[6]} onClick={j => onClick(6, j)} /></td>\n          <td><SubBoard value={board[7]} onClick={j => onClick(7, j)} /></td>\n          <td><SubBoard value={board[8]} onClick={j => onClick(8, j)} /></td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nexport default Board;\n","import { copyArray, findWinner, findGlobalWinner } from './utils';\n\nfunction hash(state) {\n  const mod = 67108859;\n  let h = 0;\n  for (const ar of state.board) {\n    for (const num of ar)\n      h = (h * 11 + num) % mod;\n  }\n  h = (h * 11 + state.turn) % mod;\n  h = (h * 11 + state.current) % mod;\n  return h;\n}\n\nfunction moveList(state) {\n  const winners = state.board.map(findWinner);\n  let current = state.current;\n  if (winners[current] !== -1)\n    current = -1;\n  const moves = [];\n  for (let i = 0; i < 9; i++) {\n    if (current !== -1 && current !== i)\n      continue;\n    for (let j = 0; j < 9; j++) {\n      if (winners[i] === -1 && state.board[i][j] === -1)\n        moves.push([i, j]);\n    }\n  }\n  return moves;\n}\n\nfunction succ(state, move) {\n  state.board[move[0]][move[1]] = state.turn;\n  state.turn = 1 - state.turn;\n  state.current = move[1];\n}\n\nfunction succImmutable(state, move) {\n  state = { ...state, board: copyArray(state.board) };\n  succ(state, move);\n  return state;\n}\n\nfunction rollout(state) {\n  state = { ...state, board: copyArray(state.board) };\n  while (true) {\n    const winner = findGlobalWinner(state.board);\n    if (winner !== -1)\n      return winner;\n    const moves = moveList(state);\n    if (!moves.length)\n      return -1;\n    succ(state, moves[Math.floor(Math.random() * moves.length)]);\n  }\n}\n\nfunction nextMove(state) {\n  let N = 0;\n  const n = {}, w = {}; // number of simulations & wins for state\n\n  function uctPolicy(node) {\n    const moves = moveList(node);\n    let best = -Infinity, ret = null;\n    for (const m of moves) {\n      const ch = succImmutable(node, m);\n      const h = hash(ch);\n      if (!n[h])\n        return null;\n      const score = w[h] / n[h] + 10 * Math.sqrt(Math.log(N) / n[h]);\n      if (score > best) {\n        ret = ch;\n        best = score;\n      }\n    }\n    return ret;\n  }\n\n  function pickUnvisited(node) {\n    const unvis = [];\n    const moves = moveList(node);\n    for (const m of moves) {\n      const ch = succImmutable(node, m);\n      if (!n[hash(ch)]) {\n        unvis.push(ch);\n      }\n    }\n    if (!unvis.length)\n      return node;\n    return unvis[Math.floor(Math.random() * unvis.length)];\n  }\n\n  const ITERS = 4200;\n  for (let it = 0; it < ITERS; it++) {\n    ++N;\n    const history = [state];\n    let leaf = state;\n    while (true) {\n      const nxt = uctPolicy(leaf);\n      if (!nxt)\n        break;\n      leaf = nxt;\n      history.push(leaf);\n    }\n    leaf = pickUnvisited(leaf);\n    history.push(leaf);\n\n    const result = rollout(leaf);\n    for (const node of history) {\n      const h = hash(node);\n      n[h] = (n[h] || 0) + 1;\n      w[h] = (w[h] || 0) + (result === -1 ? 0.5 : result === node.turn ? 0 : 1);\n    }\n  }\n\n  const moves = moveList(state);\n  let ret = null, best = -1;\n  for (const m of moves) {\n    const num = n[hash(succImmutable(state, m))];\n    if (num > best) {\n      best = num;\n      ret = m;\n    }\n  }\n  return ret;\n}\n\n// function nextMove(state) {\n//   const ITERS = 500;\n//   const moves = moveList(state);\n//   let next = null, best = -Infinity;\n//   for (const m of moves) {\n//     let fitness = 0;\n//     for (let it = 0; it < ITERS; it++) {\n//       const s = {\n//         ...state,\n//         board: copyArray(state.board)\n//       };\n//       succ(s, m);\n//       const winner = markov(s);\n//       if (winner !== -1) {\n//         if (winner === state.turn)\n//           ++fitness;\n//         else\n//           --fitness;\n//       }\n//     }\n//     fitness /= ITERS;\n//     if (fitness > best) {\n//       next = m;\n//       best = fitness;\n//     }\n//   }\n//   return next;\n// }\n\nexport default nextMove;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './Board';\nimport { copyArray, findWinner, findGlobalWinner } from './utils';\nimport nextMove from './ai';\n\nfunction startState() {\n  const board = [];\n  for (let i = 0; i < 9; i++)\n    board.push(new Array(9).fill(-1));\n  return { board, turn: 0, current: -1 };\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { history: [startState()] };\n    this.restart = this.restart.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.aiMove = this.aiMove.bind(this);\n    this.undo = this.undo.bind(this);\n  }\n\n  get gameState() {\n    return this.state.history[this.state.history.length - 1];\n  }\n\n  set gameState(next) {\n    this.setState({\n      history: this.state.history.concat([next])\n    });\n  }\n\n  restart() {\n    this.setState({ history: [startState()] });\n  }\n\n  undo() {\n    if (this.state.history.length > 1)\n      this.setState({ history: this.state.history.slice(0, -1) });\n  }\n\n  handleClick(i, j) {\n    const { gameState } = this;\n    if (findGlobalWinner(gameState.board) !== -1)\n      return; // game has ended\n    if (gameState.board[i][j] !== -1)\n      return; // cell already occupied\n    if (gameState.current !== -1) {\n      const local = gameState.board[gameState.current];\n      const localWinner = findWinner(local);\n      const freeSquares = local.indexOf(-1) !== -1;\n      if (localWinner === -1 && freeSquares && i !== gameState.current)\n        return; // must move in designated sub-board if possible\n      else if (localWinner !== -1 && i === gameState.current)\n        return; // cannot move in won board\n    }\n    const board2 = copyArray(gameState.board);\n    board2[i][j] = gameState.turn;\n    this.gameState = {\n      board: board2,\n      turn: 1 - gameState.turn,\n      current: j\n    };\n    const winner = findGlobalWinner(board2);\n    if (winner !== -1) {\n      setTimeout(() => {\n        alert(`${winner ? 'O' : 'X'} has won!`);\n      }, 1000);\n    }\n  }\n\n  aiMove() {\n    const move = nextMove(this.gameState);\n    if (move) {\n      this.handleClick(...move);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Super Tic-Tac-Toe</h1>\n        <div className=\"grid\">\n          <Board board={this.gameState.board} onClick={this.handleClick} />\n        </div>\n        <div className=\"controls\">\n          <button onClick={this.restart}>Restart</button>{' '}\n          <button onClick={this.aiMove}>AI Move</button>{' '}\n          <button onClick={this.undo}>Undo</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
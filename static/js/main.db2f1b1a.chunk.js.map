{"version":3,"sources":["Cell.js","utils.js","SubBoard.js","Board.js","ai.js","App.js","serviceWorker.js","index.js"],"names":["Cell","_ref","value","onClick","color","text","react_default","a","createElement","className","style","LINES","startState","board","i","push","Array","fill","fromJS","turn","current","findWinner","_arr","_i","length","_ref3","_ref2","Object","slicedToArray","b","c","val","get","findGlobalWinner","map","SubBoard","winner","src_Cell","Board","background","borderRadius","src_SubBoard","j","stateHash","state","hash","moveList","winners","moves","getIn","succ","move","setIn","rollout","Math","floor","random","MonteCarloBot","iterations","classCallCheck","this","N","sims","Map","wins","node","best","Infinity","ret","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","ch","h","n","score","sqrt","log","err","return","unvis","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","it","history","leaf","nxt","_uctPolicy","_pickUnvisited","result","set","max","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","m","num","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","List","restart","bind","assertThisInitialized","handleClick","aiMove","undo","ai","setState","size","slice","gameState","local","localWinner","freeSquares","indexOf","setTimeout","alert","concat","nextMove","apply","toConsumableArray","src_Board","last","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0RAUeA,MARf,SAAAC,GAAkC,IAAlBC,EAAkBD,EAAlBC,MAAOC,EAAWF,EAAXE,QACfC,EAASF,EAAQ,MAAQ,OACzBG,GAAmB,IAAXH,EAAe,GAAKA,EAAQ,IAAM,IAChD,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAON,QAASA,EAASO,MAAO,CAAEN,UAAUC,WCJzDM,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGF,SAASC,IAEd,IADA,IAAMC,EAAQ,GACLC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAME,KAAK,IAAIC,MAAM,GAAGC,MAAM,IAChC,MAAO,CAAEJ,MAAOK,YAAOL,GAAQM,KAAM,EAAGC,SAAU,GAG7C,SAASC,EAAWR,GACzB,IADgC,IAAAS,EACRX,EAAxBY,EAAA,EAAAA,EAAAD,EAAAE,OAAAD,IAA+B,KAAAE,EAAAH,EAAAC,GAAAG,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GAAnBlB,EAAmBmB,EAAA,GAAhBG,EAAgBH,EAAA,GAAbI,EAAaJ,EAAA,GACvBK,EAAMlB,EAAMmB,IAAIzB,GACtB,IAAa,IAATwB,GAAcA,IAAQlB,EAAMmB,IAAIH,IAAME,IAAQlB,EAAMmB,IAAIF,GAC1D,OAAOC,EAEX,OAAQ,EAGH,SAASE,EAAiBpB,GAC/B,OAAOQ,EAAWR,EAAMqB,IAAIb,ICDfc,MAzBf,SAAAlC,GAAsC,IAAlBC,EAAkBD,EAAlBC,MAAOC,EAAWF,EAAXE,QACnBiC,EAASf,EAAWnB,GAC1B,OACEI,EAAAC,EAAAC,cAAA,SAAOC,WAAuB,IAAZ2B,EAAgB,GAAK,OAASA,GAC9C9B,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC6B,EAAD,CAAMnC,MAAOA,EAAM8B,IAAI,GAAI7B,QAAS,kBAAMA,EAAQ,OACtDG,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC6B,EAAD,CAAMnC,MAAOA,EAAM8B,IAAI,GAAI7B,QAAS,kBAAMA,EAAQ,OACtDG,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC6B,EAAD,CAAMnC,MAAOA,EAAM8B,IAAI,GAAI7B,QAAS,kBAAMA,EAAQ,QAExDG,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC6B,EAAD,CAAMnC,MAAOA,EAAM8B,IAAI,GAAI7B,QAAS,kBAAMA,EAAQ,OACtDG,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC6B,EAAD,CAAMnC,MAAOA,EAAM8B,IAAI,GAAI7B,QAAS,kBAAMA,EAAQ,OACtDG,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC6B,EAAD,CAAMnC,MAAOA,EAAM8B,IAAI,GAAI7B,QAAS,kBAAMA,EAAQ,QAExDG,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC6B,EAAD,CAAMnC,MAAOA,EAAM8B,IAAI,GAAI7B,QAAS,kBAAMA,EAAQ,OACtDG,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC6B,EAAD,CAAMnC,MAAOA,EAAM8B,IAAI,GAAI7B,QAAS,kBAAMA,EAAQ,OACtDG,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAC6B,EAAD,CAAMnC,MAAOA,EAAM8B,IAAI,GAAI7B,QAAS,kBAAMA,EAAQ,WCKjDmC,MAxBf,SAAArC,GAAmC,IAAlBY,EAAkBZ,EAAlBY,MAAOV,EAAWF,EAAXE,QACtB,OACEG,EAAAC,EAAAC,cAAA,SAAOE,MAAO,CAAE6B,WAAY,QAASC,aAAc,IACjDlC,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACiC,EAAD,CAAUvC,MAAOW,EAAMmB,IAAI,GAAI7B,QAAS,SAAAuC,GAAC,OAAIvC,EAAQ,EAAGuC,OAC5DpC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACiC,EAAD,CAAUvC,MAAOW,EAAMmB,IAAI,GAAI7B,QAAS,SAAAuC,GAAC,OAAIvC,EAAQ,EAAGuC,OAC5DpC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACiC,EAAD,CAAUvC,MAAOW,EAAMmB,IAAI,GAAI7B,QAAS,SAAAuC,GAAC,OAAIvC,EAAQ,EAAGuC,QAE9DpC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACiC,EAAD,CAAUvC,MAAOW,EAAMmB,IAAI,GAAI7B,QAAS,SAAAuC,GAAC,OAAIvC,EAAQ,EAAGuC,OAC5DpC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACiC,EAAD,CAAUvC,MAAOW,EAAMmB,IAAI,GAAI7B,QAAS,SAAAuC,GAAC,OAAIvC,EAAQ,EAAGuC,OAC5DpC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACiC,EAAD,CAAUvC,MAAOW,EAAMmB,IAAI,GAAI7B,QAAS,SAAAuC,GAAC,OAAIvC,EAAQ,EAAGuC,QAE9DpC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACiC,EAAD,CAAUvC,MAAOW,EAAMmB,IAAI,GAAI7B,QAAS,SAAAuC,GAAC,OAAIvC,EAAQ,EAAGuC,OAC5DpC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACiC,EAAD,CAAUvC,MAAOW,EAAMmB,IAAI,GAAI7B,QAAS,SAAAuC,GAAC,OAAIvC,EAAQ,EAAGuC,OAC5DpC,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACiC,EAAD,CAAUvC,MAAOW,EAAMmB,IAAI,GAAI7B,QAAS,SAAAuC,GAAC,OAAIvC,EAAQ,EAAGuC,WCjBtE,SAASC,EAAUC,GACjB,OAAOC,YAAKD,EAAM/B,OAAS,IAAM+B,EAAMzB,KAAO,IAAMyB,EAAMxB,QAG5D,SAAS0B,EAASF,GAChB,IAAMG,EAAUH,EAAM/B,MAAMqB,IAAIb,GAC5BD,EAAUwB,EAAMxB,SACU,IAA1B2B,EAAQf,IAAIZ,KACdA,GAAW,GAEb,IADA,IAAM4B,EAAQ,GACLlC,EAAI,EAAGA,EAAI,EAAGA,IACrB,IAAiB,IAAbM,GAAkBA,IAAYN,EAElC,IAAK,IAAI4B,EAAI,EAAGA,EAAI,EAAGA,KACG,IAApBK,EAAQf,IAAIlB,KAA4C,IAA/B8B,EAAM/B,MAAMoC,MAAM,CAACnC,EAAG4B,KACjDM,EAAMjC,KAAK,CAACD,EAAG4B,IAGrB,OAAOM,EAGT,SAASE,EAAKN,EAAOO,GACnB,MAAO,CACLtC,MAAO+B,EAAM/B,MAAMuC,MAAMD,EAAMP,EAAMzB,MACrCA,KAAM,EAAIyB,EAAMzB,KAChBC,QAAS+B,EAAK,IAIlB,SAASE,EAAQT,GACf,OAAa,CACX,IAAMR,EAASH,EAAiBW,EAAM/B,OACtC,IAAgB,IAAZuB,EACF,OAAOA,EACT,IAAMY,EAAQF,EAASF,GACvB,IAAKI,EAAMxB,OACT,OAAQ,EACVoB,EAAQM,EAAKN,EAAOI,EAAMM,KAAKC,MAAMD,KAAKE,SAAWR,EAAMxB,eA+EhDiC,aA1Eb,SAAAA,EAAYC,GAAa/B,OAAAgC,EAAA,EAAAhC,CAAAiC,KAAAH,GACvBG,KAAKC,EAAI,EACTD,KAAKE,KAAO,IAAIC,IAChBH,KAAKI,KAAO,IAAID,IAChBH,KAAKF,WAAaA,yDAGTO,GACT,IAAMjB,EAAQF,EAASmB,GACnBC,GAAQC,IAAUC,EAAM,KAFbC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAGf,QAAAC,EAAAC,EAAgB1B,EAAhB2B,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAuB,KACfU,EAAK7B,EAAKe,EADKQ,EAAAvE,OAEf8E,EAAIrC,EAAUoC,GACdE,EAAIrB,KAAKE,KAAK9B,IAAIgD,GACxB,IAAKC,EACH,OAAO,KACT,IACMC,EADItB,KAAKI,KAAKhC,IAAIgD,GACNC,EAAI,GAAK3B,KAAK6B,KAAK7B,KAAK8B,IAAIxB,KAAKC,GAAKoB,GACpDC,EAAQhB,IACVE,EAAMW,EACNb,EAAOgB,IAbI,MAAAG,GAAAf,GAAA,EAAAC,EAAAc,EAAA,YAAAhB,GAAA,MAAAK,EAAAY,QAAAZ,EAAAY,SAAA,WAAAhB,EAAA,MAAAC,GAgBf,OAAOH,yCAGMH,GACb,IAAMsB,EAAQ,GACRvC,EAAQF,EAASmB,GAFJuB,GAAA,EAAAC,GAAA,EAAAC,OAAAlB,EAAA,IAGnB,QAAAmB,EAAAC,EAAgB5C,EAAhB2B,OAAAC,cAAAY,GAAAG,EAAAC,EAAAf,QAAAC,MAAAU,GAAA,EAAuB,KACfT,EAAK7B,EAAKe,EADK0B,EAAAzF,OAEhB0D,KAAKE,KAAK9B,IAAIW,EAAUoC,KAC3BQ,EAAMxE,KAAKgE,IANI,MAAAM,GAAAI,GAAA,EAAAC,EAAAL,EAAA,YAAAG,GAAA,MAAAI,EAAAN,QAAAM,EAAAN,SAAA,WAAAG,EAAA,MAAAC,GASnB,OAAKH,EAAM/D,OAEJ+D,EAAMjC,KAAKC,MAAMD,KAAKE,SAAW+B,EAAM/D,SADrCyC,mCAIFrB,GACP,IAAK,IAAIiD,EAAK,EAAGA,EAAKjC,KAAKF,WAAYmC,IAAM,GACzCjC,KAAKC,EAGP,IAFA,IAAMiC,EAAU,CAAClD,GACbmD,EAAOnD,IACE,CACX,IAAMoD,EAAMpC,KAAKqC,WAAWF,GAC5B,IAAKC,EACH,MACFD,EAAOC,EACPF,EAAQ/E,KAAKgF,GAEfA,EAAOnC,KAAKsC,eAAeH,GAC3BD,EAAQ/E,KAAKgF,GAGb,IADA,IAAMI,EAAS9C,EAAQ0C,GAdoBzE,EAexBwE,EAAnBvE,EAAA,EAAAA,EAAAD,EAAAE,OAAAD,IAA4B,CAAvB,IAAM0C,EAAI3C,EAAAC,GACPyD,EAAIrC,EAAUsB,GACpBL,KAAKE,KAAKsC,IAAIpB,GAAIpB,KAAKE,KAAK9B,IAAIgD,IAAM,GAAK,GAC3CpB,KAAKI,KAAKoC,IAAIpB,GAAIpB,KAAKI,KAAKhC,IAAIgD,IAAM,KAAkB,IAAZmB,EAAgB,GAAMA,IAAWlC,EAAK9C,KAAO,EAAI,KAIjG,IAAM6B,EAAQF,EAASF,GACnBwB,EAAM,KAAMiC,GAAO,EAxBTC,GAAA,EAAAC,GAAA,EAAAC,OAAAhC,EAAA,IAyBd,QAAAiC,EAAAC,EAAgB1D,EAAhB2B,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA7B,QAAAC,MAAAwB,GAAA,EAAuB,KAAZK,EAAYF,EAAAvG,MACf0G,EAAMhD,KAAKE,KAAK9B,IAAIW,EAAUO,EAAKN,EAAO+D,KAC5CC,EAAMP,IACPjC,EAAauC,EAARN,EAAWO,IA5BP,MAAAvB,GAAAkB,GAAA,EAAAC,EAAAnB,EAAA,YAAAiB,GAAA,MAAAI,EAAApB,QAAAoB,EAAApB,SAAA,WAAAiB,EAAA,MAAAC,GA8Bd,OAAOpC,WCxBIyC,cAnFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAApF,OAAAgC,EAAA,EAAAhC,CAAAiC,KAAAiD,IACjBE,EAAApF,OAAAqF,EAAA,EAAArF,CAAAiC,KAAAjC,OAAAsF,EAAA,EAAAtF,CAAAkF,GAAAK,KAAAtD,KAAMkD,KACDlE,MAAQ,CAAEkD,QAAS,IAAIqB,IAAK,CAACvG,OAClCmG,EAAKK,QAAUL,EAAKK,QAAQC,KAAb1F,OAAA2F,EAAA,EAAA3F,QAAA2F,EAAA,EAAA3F,CAAAoF,KACfA,EAAKQ,YAAcR,EAAKQ,YAAYF,KAAjB1F,OAAA2F,EAAA,EAAA3F,QAAA2F,EAAA,EAAA3F,CAAAoF,KACnBA,EAAKS,OAAST,EAAKS,OAAOH,KAAZ1F,OAAA2F,EAAA,EAAA3F,QAAA2F,EAAA,EAAA3F,CAAAoF,KACdA,EAAKU,KAAOV,EAAKU,KAAKJ,KAAV1F,OAAA2F,EAAA,EAAA3F,QAAA2F,EAAA,EAAA3F,CAAAoF,KACZA,EAAKW,GAAK,IAAIjE,EAAc,KAPXsD,yEAqBjBnD,KAAK+D,SAAS,CAAE7B,QAAS,IAAIqB,IAAK,CAACvG,QACnCgD,KAAK8D,GAAK,IAAIjE,EAAc,oCAIxBG,KAAKhB,MAAMkD,QAAQ8B,KAAO,GAC5BhE,KAAK+D,SAAS,CAAE7B,QAASlC,KAAKhB,MAAMkD,QAAQ+B,MAAM,GAAI,yCAG9C/G,EAAG4B,GAAG,IACRoF,EAAclE,KAAdkE,UACR,IAA2C,IAAvC7F,EAAiB6F,EAAUjH,SAEQ,IAAnCiH,EAAUjH,MAAMoC,MAAM,CAACnC,EAAG4B,IAA9B,CAEA,IAA2B,IAAvBoF,EAAU1G,QAAgB,CAC5B,IAAM2G,EAAQD,EAAUjH,MAAMmB,IAAI8F,EAAU1G,SACtC4G,EAAc3G,EAAW0G,GACzBE,GAAqC,IAAvBF,EAAMG,SAAS,GACnC,IAAqB,IAAjBF,GAAsBC,GAAenH,IAAMgH,EAAU1G,QACvD,OACG,IAAqB,IAAjB4G,GAAsBlH,IAAMgH,EAAU1G,QAC7C,OAEJ,IAAMP,EAAQiH,EAAUjH,MAAMuC,MAAM,CAACtC,EAAG4B,GAAIoF,EAAU3G,MACtDyC,KAAKkE,UAAY,CACfjH,QACAM,KAAM,EAAI2G,EAAU3G,KACpBC,QAASsB,GAEX,IAAMN,EAASH,EAAiBpB,IAChB,IAAZuB,GACF+F,WAAW,WACTC,MAAK,GAAAC,OAAIjG,EAAS,IAAM,IAAnB,eACJ,uCAKL,IAAMe,EAAOS,KAAK8D,GAAGY,SAAS1E,KAAKkE,WAC/B3E,GACFS,KAAK2D,YAALgB,MAAA3E,KAAAjC,OAAA6G,EAAA,EAAA7G,CAAoBwB,qCAKtB,OACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACiI,EAAD,CAAO5H,MAAO+C,KAAKkE,UAAUjH,MAAOV,QAASyD,KAAK2D,eAEpDjH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UAAQL,QAASyD,KAAKwD,SAAtB,WAAgD,IAChD9G,EAAAC,EAAAC,cAAA,UAAQL,QAASyD,KAAK4D,QAAtB,WAA+C,IAC/ClH,EAAAC,EAAAC,cAAA,UAAQL,QAASyD,KAAK6D,MAAtB,4CAjEN,OAAO7D,KAAKhB,MAAMkD,QAAQ4C,qBAGd7D,GACZjB,KAAK+D,SAAS,CACZ7B,QAASlC,KAAKhB,MAAMkD,QAAQ/E,KAAK8D,YAjBrB8D,aCKZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/G,QACfyG,UAAUC,cAAcQ,YAI1BC,QAAQ3E,IACN,gHAKEgE,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBM,QAAQ3E,IAAI,sCAGRgE,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,UAO5BS,MAAM,SAAAC,GACLJ,QAAQI,MAAM,4CAA6CA,KC1FjEC,IAASC,OAAO/J,EAAAC,EAAAC,cAAC8J,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,IAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,OAAQ,WAC9B,IAAM1B,EAAK,GAAAd,OAAMqC,IAAN,sBAEP9B,GAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,GACHK,KAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASE,QAAQjJ,IAAI,gBAEnB,MAApB+I,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAY9C,QAAQ,cAG5CmB,UAAUC,cAAc6B,MAAM3B,KAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,KAAK,WAC7BV,OAAOC,SAASsC,aAKpBnC,EAAgBC,EAAOC,KAG1Bc,MAAM,WACLH,QAAQ3E,IACN,mEArFAkG,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,KAAK,WACjCO,QAAQ3E,IACN,+GAMJ8D,EAAgBC,EAAOC,MCvC/BE","file":"static/js/main.db2f1b1a.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Cell({ value, onClick }) {\n  const color = (value ? 'red' : 'blue');\n  const text = (value === -1 ? '' : value ? 'O' : 'X');\n  return (\n    <div className=\"cell\" onClick={onClick} style={{ color }}>{text}</div>\n  );\n}\n\nexport default Cell;\n","import { fromJS } from 'immutable';\n\nconst LINES = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nexport function startState() {\n  const board = [];\n  for (let i = 0; i < 9; i++)\n    board.push(new Array(9).fill(-1));\n  return { board: fromJS(board), turn: 0, current: -1 };\n}\n\nexport function findWinner(board) {\n  for (const [a, b, c] of LINES) {\n    const val = board.get(a);\n    if (val !== -1 && val === board.get(b) && val === board.get(c))\n      return val;\n  }\n  return -1;\n}\n\nexport function findGlobalWinner(board) {\n  return findWinner(board.map(findWinner));\n}\n","import React from 'react';\nimport Cell from './Cell';\nimport { findWinner } from './utils';\n\nfunction SubBoard({ value, onClick }) {\n  const winner = findWinner(value);\n  return (\n    <table className={winner === -1 ? '' : 'win-' + winner}>\n      <tbody>\n        <tr>\n          <td><Cell value={value.get(0)} onClick={() => onClick(0)} /></td>\n          <td><Cell value={value.get(1)} onClick={() => onClick(1)} /></td>\n          <td><Cell value={value.get(2)} onClick={() => onClick(2)} /></td>\n        </tr>\n        <tr>\n          <td><Cell value={value.get(3)} onClick={() => onClick(3)} /></td>\n          <td><Cell value={value.get(4)} onClick={() => onClick(4)} /></td>\n          <td><Cell value={value.get(5)} onClick={() => onClick(5)} /></td>\n        </tr>\n        <tr>\n          <td><Cell value={value.get(6)} onClick={() => onClick(6)} /></td>\n          <td><Cell value={value.get(7)} onClick={() => onClick(7)} /></td>\n          <td><Cell value={value.get(8)} onClick={() => onClick(8)} /></td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nexport default SubBoard;\n","import React from 'react';\nimport SubBoard from './SubBoard';\n\nfunction Board({ board, onClick }) {\n  return (\n    <table style={{ background: 'black', borderRadius: 6 }}>\n      <tbody>\n        <tr>\n          <td><SubBoard value={board.get(0)} onClick={j => onClick(0, j)} /></td>\n          <td><SubBoard value={board.get(1)} onClick={j => onClick(1, j)} /></td>\n          <td><SubBoard value={board.get(2)} onClick={j => onClick(2, j)} /></td>\n        </tr>\n        <tr>\n          <td><SubBoard value={board.get(3)} onClick={j => onClick(3, j)} /></td>\n          <td><SubBoard value={board.get(4)} onClick={j => onClick(4, j)} /></td>\n          <td><SubBoard value={board.get(5)} onClick={j => onClick(5, j)} /></td>\n        </tr>\n        <tr>\n          <td><SubBoard value={board.get(6)} onClick={j => onClick(6, j)} /></td>\n          <td><SubBoard value={board.get(7)} onClick={j => onClick(7, j)} /></td>\n          <td><SubBoard value={board.get(8)} onClick={j => onClick(8, j)} /></td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nexport default Board;\n","import { hash } from 'immutable';\nimport { findWinner, findGlobalWinner } from './utils';\n\nfunction stateHash(state) {\n  return hash(state.board) + '|' + state.turn + '|' + state.current;\n}\n\nfunction moveList(state) {\n  const winners = state.board.map(findWinner);\n  let current = state.current;\n  if (winners.get(current) !== -1)\n    current = -1;\n  const moves = [];\n  for (let i = 0; i < 9; i++) {\n    if (current !== -1 && current !== i)\n      continue;\n    for (let j = 0; j < 9; j++) {\n      if (winners.get(i) === -1 && state.board.getIn([i, j]) === -1)\n        moves.push([i, j]);\n    }\n  }\n  return moves;\n}\n\nfunction succ(state, move) {\n  return {\n    board: state.board.setIn(move, state.turn),\n    turn: 1 - state.turn,\n    current: move[1]\n  };\n}\n\nfunction rollout(state) {\n  while (true) {\n    const winner = findGlobalWinner(state.board);\n    if (winner !== -1)\n      return winner;\n    const moves = moveList(state);\n    if (!moves.length)\n      return -1;\n    state = succ(state, moves[Math.floor(Math.random() * moves.length)]);\n  }\n}\n\nclass MonteCarloBot {\n  constructor(iterations) {\n    this.N = 0;\n    this.sims = new Map();\n    this.wins = new Map();\n    this.iterations = iterations;\n  }\n\n  _uctPolicy(node) {\n    const moves = moveList(node);\n    let best = -Infinity, ret = null;\n    for (const m of moves) {\n      const ch = succ(node, m);\n      const h = stateHash(ch);\n      const n = this.sims.get(h);\n      if (!n)\n        return null;\n      const w = this.wins.get(h);\n      const score = w / n + 10 * Math.sqrt(Math.log(this.N) / n);\n      if (score > best) {\n        ret = ch;\n        best = score;\n      }\n    }\n    return ret;\n  }\n\n  _pickUnvisited(node) {\n    const unvis = [];\n    const moves = moveList(node);\n    for (const m of moves) {\n      const ch = succ(node, m);\n      if (!this.sims.get(stateHash(ch))) {\n        unvis.push(ch);\n      }\n    }\n    if (!unvis.length)\n      return node;\n    return unvis[Math.floor(Math.random() * unvis.length)];\n  }\n\n  nextMove(state) {\n    for (let it = 0; it < this.iterations; it++) {\n      ++this.N;\n      const history = [state];\n      let leaf = state;\n      while (true) {\n        const nxt = this._uctPolicy(leaf);\n        if (!nxt)\n          break;\n        leaf = nxt;\n        history.push(leaf);\n      }\n      leaf = this._pickUnvisited(leaf);\n      history.push(leaf);\n\n      const result = rollout(leaf);\n      for (const node of history) {\n        const h = stateHash(node);\n        this.sims.set(h, (this.sims.get(h) || 0) + 1);\n        this.wins.set(h, (this.wins.get(h) || 0) + (result === -1 ? 0.5 : result === node.turn ? 0 : 1));\n      }\n    }\n\n    const moves = moveList(state);\n    let ret = null, max = -1;\n    for (const m of moves) {\n      const num = this.sims.get(stateHash(succ(state, m)));\n      if (num > max)\n        [ret, max] = [m, num];\n    }\n    return ret;\n  }\n}\n\nexport default MonteCarloBot;\n","import React, { Component } from 'react';\nimport { List } from 'immutable';\nimport './App.css';\nimport Board from './Board';\nimport { startState, findWinner, findGlobalWinner } from './utils';\nimport MonteCarloBot from './ai';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { history: new List([startState()]) };\n    this.restart = this.restart.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.aiMove = this.aiMove.bind(this);\n    this.undo = this.undo.bind(this);\n    this.ai = new MonteCarloBot(1000);\n  }\n\n  get gameState() {\n    return this.state.history.last();\n  }\n\n  set gameState(next) {\n    this.setState({\n      history: this.state.history.push(next)\n    });\n  }\n\n  restart() {\n    this.setState({ history: new List([startState()]) });\n    this.ai = new MonteCarloBot(1000);\n  }\n\n  undo() {\n    if (this.state.history.size > 1)\n      this.setState({ history: this.state.history.slice(0, -1) });\n  }\n\n  handleClick(i, j) {\n    const { gameState } = this;\n    if (findGlobalWinner(gameState.board) !== -1)\n      return; // game has ended\n    if (gameState.board.getIn([i, j]) !== -1)\n      return; // cell already occupied\n    if (gameState.current !== -1) {\n      const local = gameState.board.get(gameState.current);\n      const localWinner = findWinner(local);\n      const freeSquares = local.indexOf(-1) !== -1;\n      if (localWinner === -1 && freeSquares && i !== gameState.current)\n        return; // must move in designated sub-board if possible\n      else if (localWinner !== -1 && i === gameState.current)\n        return; // cannot move in won board\n    }\n    const board = gameState.board.setIn([i, j], gameState.turn);\n    this.gameState = {\n      board,\n      turn: 1 - gameState.turn,\n      current: j\n    };\n    const winner = findGlobalWinner(board);\n    if (winner !== -1) {\n      setTimeout(() => {\n        alert(`${winner ? 'O' : 'X'} has won!`);\n      }, 1000);\n    }\n  }\n\n  aiMove() {\n    const move = this.ai.nextMove(this.gameState);\n    if (move) {\n      this.handleClick(...move);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Super Tic-Tac-Toe</h1>\n        <div className=\"grid\">\n          <Board board={this.gameState.board} onClick={this.handleClick} />\n        </div>\n        <div className=\"controls\">\n          <button onClick={this.restart}>Restart</button>{' '}\n          <button onClick={this.aiMove}>AI Move</button>{' '}\n          <button onClick={this.undo}>Undo</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}